version: '3'

services:
  registry-app:
    hostname: registry                                        # 注册中心的hostname一定要有，且必须和代码中配置文件里的hostname一致
    image: "logistics-registry-app:0.0.1"                     # 镜像名：标签名
    container_name: registry-app
    ports:
      - 4000:4000                                             # 映射的端口号，和代码中配置文件里的端口号一致                                              # 加入的网络
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}       # spring-boot环境
      EUREKA_INSTANCE_HOSTNAME: ${EUREKA_INSTANCE_HOSTNAME}
    networks:
      - app-net
    restart: "on-failure"
  gateway-app:
    hostname: registry
    image: "logistics-gateway-app:0.0.1"
    container_name: gateway-app
    ports:
      - 5000:5000
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      EUREKA_INSTANCE_HOSTNAME: ${EUREKA_INSTANCE_HOSTNAME}
    depends_on:
      - registry-app
    networks:
      - app-net
    restart: "on-failure"
  order-app:
    hostname: registry
    image: "logistics-order-app:0.0.1"
    container_name: order-app
    ports:
      - 6050:6050
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      EUREKA_INSTANCE_HOSTNAME: ${EUREKA_INSTANCE_HOSTNAME}
      DB_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
    depends_on:
      - registry-app
      - mysql
    links:
      - mysql
    networks:
      - app-net
    restart: "on-failure"
  track-app:
    hostname: registry
    image: "logistics-track-app:0.0.1"
    container_name: track-app
    ports:
      - 6060:6060
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      EUREKA_INSTANCE_HOSTNAME: ${EUREKA_INSTANCE_HOSTNAME}
      DB_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
    depends_on:
      - registry-app
      - mysql
    links:
      - mysql
    networks:
      - app-net
    restart: "on-failure"
  redis:
    image: redis:6.2.1
    container_name: redis
    ports:
      - 6379:6379
    volumes:
      - ${DOCKER_DIR}/data:/data
    networks:
      - app-net
    restart: "on-failure"
  mysql:
    image: mysql:8.0.23
    container_name: mysql
    ports:
      - 3306:3306
    volumes:
      - ${DOCKER_DIR}/var/lib/mysql:/var/lib/mysql
      - ${DOCKER_DIR}/etc/mysql:/etc/mysql
    environment:
      TZ: Asia/Shanghai
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
    privileged: true
    networks:
      - app-net
    restart: "on-failure"
  adminer:
    image: adminer:4.8.0
    container_name: adminer
    ports:
      - 8080:8080
    environment:
      ADMINER_DESIGN: 'nette'
      ADMINER_PLUGINS: 'tables-filter tinymce'
      ADMINER_DEFAULT_SERVER: mysql
    networks:
      - app-net
    restart: on-failure
  mongo:
    image: mongo:4.4.5
    container_name: mongo
    ports:
      - 27017:27017
    volumes:
      - ${DOCKER_DIR}/data/db:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
    networks:
      - app-net
    restart: on-failure
  mongo-express:
    image: mongo-express:0.54.0
    container_name: mongo-express
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${DB_ROOT_PASSWORD}
    networks:
      - app-net
    restart: on-failure

networks:
  app-net:
    driver: bridge